generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String
  price       Float?       @default(0)
  isDeleted   Boolean      @default(false)
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleModules RoleModule[]
  users       User[]
  modules     Module[]     @relation("ModuleToRole")
}

model Module {
  id          String       @id @default(uuid())
  name        String
  isDeleted   Boolean      @default(false)
  createdBy   String?
  updatedBy   String?
  deletedBy   String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  roleModules RoleModule[]
  roles       Role[]       @relation("ModuleToRole")
}

model RoleModule {
  id        String   @id @default(uuid())
  roleId    String
  moduleId  String
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  module    Module   @relation(fields: [moduleId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)
}

model User {
  id                   String               @id @default(uuid())
  roleId               String?
  parentId             String?
  name                 String
  email                String
  phone                String?
  address              String?
  billingAddress       String?
  country              String?
  city                 String?
  postalCode           String?
  image                String?              @default("images/user/user.png")
  password             String?
  otp                  Int?
  otpCount             Int?                 @default(0)
  initialPaymentAmount Float?               @default(0)
  initialPaymentDue    Float?               @default(0)
  installmentTime      Float?               @default(0)
  refreshToken         String?
  isActive             Boolean              @default(true)
  isDeleted            Boolean              @default(false)
  createdBy            String?
  updatedBy            String?
  deletedBy            String?
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  fullname             String
  about                String?
  apartment            String?
  billingCompany       String?
  billingCountry       String?
  billingEmail         String?
  billingFirstName     String?
  billingLastName      String?
  billingPhone         String?
  language             String?
  state                String?
  credits              Int?                 @default(0)
  creditsUsed          Int?                 @default(0)
  bundleOrder          BundleOrder[]
  campaigns            Campaign[]
  categories           Category[]
  downloadUrls         DownloadUrl[]
  licenseCertificates  LicenseCertificate[]
  order                Order[]
  resetTokens          PasswordResetToken[]
  payments             Payment[]
  preorder             Preorder[]
  products             Product[]
  review               Review[]
  suppliers            Supplier[]
  parent               User?                @relation("ParentIdUserId", fields: [parentId], references: [id])
  children             User[]               @relation("ParentIdUserId")
  role                 Role?                @relation(fields: [roleId], references: [id])
  wishlist             Wishlist[]
}

model Banner {
  id        String   @id @default(uuid())
  title     String
  subtitle  String
  image     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  url       String?
}

model Payment {
  id        String    @id @default(uuid())
  userId    String
  date      DateTime? @default(now())
  amount    Float     @default(0)
  due       Float?    @default(0)
  isDeleted Boolean   @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Category {
  id             String           @id @default(uuid())
  userId         String
  name           String
  image          String?          @default("images/category/category.png")
  slug           String
  createdBy      String?
  updatedBy      String?
  deletedBy      String?
  isActive       Boolean          @default(true)
  isDeleted      Boolean          @default(false)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  campaigns      Campaign[]
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  products       Product[]
  subcategory    Subcategory[]
  subsubcategory Subsubcategory[]
}

model Subcategory {
  id             String           @id @default(uuid())
  categoryId     String
  name           String           @unique
  image          String?
  slug           String
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  product        Product[]
  category       Category         @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subsubcategory Subsubcategory[]
}

model Subsubcategory {
  id            String      @id @default(uuid())
  categoryId    String
  subcategoryId String
  name          String      @unique
  image         String?
  slug          String
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  product       Product[]
  category      Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory   Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
}

model Campaign {
  id         String    @id @default(uuid())
  userId     String
  name       String
  image      String?   @default("images/campaign/campaign.png")
  date       DateTime? @default(now())
  slug       String
  categoryId String
  viewCount  Int?      @default(0)
  createdBy  String?
  updatedBy  String?
  deletedBy  String?
  isActive   Boolean   @default(true)
  isDeleted  Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  category   Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  product    Product[]
}

model Brand {
  id        String    @id @default(uuid())
  name      String    @unique
  image     String?
  slug      String
  isActive  Boolean   @default(true)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  product   Product[]
}

model Supplier {
  id        String    @id @default(uuid())
  userId    String
  name      String
  address   String
  phone     String
  email     String?
  createdBy String?
  updatedBy String?
  deletedBy String?
  isDeleted Boolean   @default(false)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  products  Product[]
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Product {
  id                  String               @id @default(uuid())
  userId              String?
  categoryId          String
  subcategoryId       String?
  subsubcategoryId    String?
  campaignId          String?
  supplierId          String?
  brandId             String?
  productCode         String?              @default(nanoid(6))
  barcode             String?              @default(nanoid(12))
  name                String
  shortDescription    String?
  longDescription     String?
  sku                 String?
  isTrending          Boolean              @default(false)
  isFeatured          Boolean              @default(false)
  viewCount           Int?                 @default(0)
  slug                String
  createdBy           String?
  updatedBy           String?
  deletedBy           String?
  isActive            Boolean              @default(true)
  isDeleted           Boolean              @default(false)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  fileSize            String?
  resolution          String?
  downloadUrl         String?
  paddlePriceId       String?
  paddleProductId     String?
  downloadUrls        DownloadUrl[]
  licenseCertificates LicenseCertificate[]
  orderItems          OrderItem[]
  preorder            Preorder[]
  brand               Brand?               @relation(fields: [brandId], references: [id], onDelete: Cascade)
  campaign            Campaign?            @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  category            Category             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  subcategory         Subcategory?         @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)
  subsubcategory      Subsubcategory?      @relation(fields: [subsubcategoryId], references: [id], onDelete: Cascade)
  supplier            Supplier?            @relation(fields: [supplierId], references: [id], onDelete: Cascade)
  user                User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  productAttributes   ProductAttribute[]
  images              ProductImage[]
  review              Review[]
  wishlist            Wishlist[]
}

model ProductAttribute {
  id                    String      @id @default(uuid())
  productId             String
  size                  String
  costPrice             Float
  retailPrice           Float
  discountPercent       Float?      @default(0)
  discountPrice         Float?      @default(0)
  discountedRetailPrice Float
  stockAmount           Float
  isDeleted             Boolean     @default(false)
  createdBy             String?
  updatedBy             String?
  deletedBy             String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt
  paddlePriceId         String?
  orderItem             OrderItem[]
  preorder              Preorder[]
  product               Product     @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductImage {
  id        String   @id @default(uuid())
  productId String
  image     String?  @default("images/product/product.png")
  isDeleted Boolean  @default(false)
  createdBy String?
  updatedBy String?
  deletedBy String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Order {
  id                     String               @id @default(uuid())
  userId                 String?
  couponId               String?
  invoiceNumber          String?              @default(nanoid(6))
  customerName           String?
  customerPhone          String?
  customerAddress        String?
  customerBillingAddress String?
  customerEmail          String?
  customerCity           String?
  customerPostalCode     String?
  totalItems             Float?
  subtotalCost           Float?
  subtotal               Float?
  paymentMethod          String?              @default("COD")
  status                 OrderStatus?         @default(PENDING)
  otp                    String?
  deliveryChargeInside   Float?
  deliveryChargeOutside  Float?
  isDeleted              Boolean              @default(false)
  createdBy              String?
  updatedBy              String?
  createdAt              DateTime             @default(now())
  updatedAt              DateTime             @updatedAt
  address                String?
  apartment              String?
  billingCompany         String?
  billingCountry         String?
  billingEmail           String?
  billingFirstName       String?
  billingLastName        String?
  billingPhone           String?
  city                   String?
  postalCode             String?
  state                  String?
  invoiceHtml            String?
  downloadUrls           DownloadUrl[]
  licenseCertificates    LicenseCertificate[]
  coupon                 Coupon?              @relation(fields: [couponId], references: [id], onDelete: Cascade)
  user                   User?                @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems             OrderItem[]
}

model OrderItem {
  id                    String            @id @default(uuid())
  orderId               String?
  productId             String?
  productAttributeId    String?
  name                  String
  size                  String
  costPrice             Float
  retailPrice           Float
  discountPercent       Float?            @default(0)
  discountPrice         Float?            @default(0)
  discountedRetailPrice Float
  quantity              Float
  totalCostPrice        Float
  totalPrice            Float
  isDeleted             Boolean           @default(false)
  createdBy             String?
  updatedBy             String?
  createdAt             DateTime          @default(now())
  updatedAt             DateTime          @updatedAt
  bundleOrderId         String?
  bundleOrder           BundleOrder?      @relation("BundleOrderToOrderItems", fields: [bundleOrderId], references: [id])
  order                 Order?            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productAttribute      ProductAttribute? @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  product               Product?          @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String   @id @default(uuid())
  productId String
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Review {
  id        String   @id @default(uuid())
  productId String
  userId    String
  rating    Float
  comment   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Coupon {
  id              String   @id @default(uuid())
  code            String
  name            String
  orderPriceLimit Float?
  discountAmount  Float
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  order           Order[]
}

model Preorder {
  id                 String            @id @default(uuid())
  productId          String
  userId             String
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt
  productAttributeId String?
  productAttribute   ProductAttribute? @relation(fields: [productAttributeId], references: [id], onDelete: Cascade)
  product            Product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  user               User              @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Newsletter {
  id        String   @id @default(uuid())
  email     String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Contact {
  id        String   @id @default(uuid())
  name      String
  email     String
  subject   String
  message   String
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model brokerusers {
  id                          String   @id @default(uuid())
  loginUsrid                  String?
  username                    String?
  password                    String?
  role                        String?
  marginType                  String?
  segmentAllow                String?
  ledgerBalanceClose          Int?
  profitTradeHoldMinSec       Int?
  lossTradeHoldMinSec         Int?
  intradaySquare              Boolean?
  mcx_commission              Int?
  mcx_commissionType          String?
  mcx_intraday                Int?
  mcx_limitPercentage         Int?
  mcx_maxExchLots             Int?
  mcx_maxLots                 Int?
  mcx_orderLots               Int?
  mcxOPTBUY_allow             String?
  mcxOPTBUY_commission        Int?
  mcxOPTBUY_commissionType    String?
  mcxOPTBUY_strike            Int?
  mcxOPTSELL_allow            String?
  mcxOPTSELL_commission       Int?
  mcxOPTSELL_commissionType   String?
  mcxOPTSELL_strike           Int?
  mcxOPT_holding              Int?
  mcxOPT_intraday             Int?
  mcxOPT_limitPercentage      Int?
  mcxOPT_maxLots              Int?
  mcxOPT_orderLots            Int?
  mcxOPT_sellingOvernight     String?
  idxNSE_commission           Int?
  idxNSE_commissionType       String?
  idxNSE_holding              Int?
  idxNSE_intraday             Int?
  idxNSE_limitPercentage      Int?
  idxNSE_maxLots              Int?
  idxNSE_orderLots            Int?
  nse_maxExchLots             Int?
  idxOPTBUY_allow             String?
  idxOPTBUY_commission        Int?
  idxOPTBUY_commissionType    String?
  idxOPTBUY_strike            Int?
  idxOPTSELL_allow            String?
  idxOPTSELL_commission       Int?
  idxOPTSELL_commissionType   String?
  idxOPTSELL_strike           Int?
  idxOPT_expiryIntradayMargin Int?
  idxOPT_expiryLossHold       Int?
  idxOPT_expiryProfitHold     Int?
  idxOPT_holding              Int?
  idxOPT_intraday             Int?
  idxOPT_limitPercentage      Int?
  idxOPT_maxLots              Int?
  idxOPT_orderLots            Int?
  idxOPT_sellingOvernight     String?
  stkOPTBUY_allow             String?
  stkOPTBUY_commission        Int?
  stkOPTBUY_commissionType    String?
  stkOPTBUY_strike            Int?
  STKOPTSELL_allow            String?
  STKOPTSELL_commission       Int?
  STKOPTSELL_commissionType   String?
  STKOPTSELL_strike           Int?
  STKOPT_holding              Int?
  STKOPT_intraday             Int?
  STKOPT_limitPercentage      Int?
  STKOPT_maxLots              Int?
  STKOPT_orderLots            Int?
  STKOPT_sellingOvernight     String?
  mcx_holding                 Int?
  margin_used                 Int?
}

model TradeOrder {
  id               String   @id @default(uuid())
  scriptName       String?
  ltp              Float?
  bidPrice         Float?
  askPrice         Float?
  ltq              Float?
  orderType        String
  lotSize          Int?
  orderLots        Int?
  quantity         Int?
  priceType        String?
  isStopLossTarget Boolean?
  stopLoss         Float?
  target           Float?
  margin           Float?
  carry            Float?
  marginLimit      Float?
  userId           String?
  createdAt        DateTime @default(now())
}

model Deposit {
  id            Int      @id @default(autoincrement())
  depositAmount Float?
  depositImage  String?
  createdAt     DateTime @default(now())
  depositType   String   @default("Deposit")
  loginUserId   String?
  status        String?
}

model Withdraw {
  id            String   @id @default(cuid())
  type          String
  amount        Float?
  upi           String?
  accountName   String?
  accountNumber String?
  ifsc          String?
  status        String   @default("Pending")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  loginUserId   String?
  username      String?
}

model DownloadUrl {
  id          String   @id @default(uuid())
  userId      String?
  productId   String?
  orderId     String?
  downloadUrl String?
  createdAt   DateTime @default(now())
  licenseText String?
  licenseType String?
  order       Order?   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product     Product? @relation(fields: [productId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])
}

model LicenseCertificate {
  id            String       @id @default(uuid())
  userId        String?
  orderId       String?
  productId     String?
  licenseType   String
  licenseText   String
  downloadUrl   String?
  createdAt     DateTime     @default(now())
  bundleOrderId String?
  bundleOrder   BundleOrder? @relation(fields: [bundleOrderId], references: [id])
  order         Order?       @relation(fields: [orderId], references: [id])
  product       Product?     @relation(fields: [productId], references: [id])
  user          User?        @relation(fields: [userId], references: [id])
}

model Bundle {
  id              String   @id @default(cuid())
  title           String?
  price           Float?
  regularPrice    Float?
  discountPrice   Float?
  mockups         Int?
  createdAt       DateTime @default(now())
  paddlePriceId   String?
  paddleProductId String?
}

model BundleOrder {
  id                  String               @id @default(uuid())
  userId              String
  invoiceNumber       String?
  billingFirstName    String
  billingLastName     String
  billingEmail        String
  billingPhone        String
  address             String
  city                String
  postalCode          String
  totalItems          Int
  subtotal            Float
  createdAt           DateTime             @default(now())
  invoiceHtml         String?
  user                User                 @relation(fields: [userId], references: [id])
  licenseCertificates LicenseCertificate[]
  orderItems          OrderItem[]          @relation("BundleOrderToOrderItems")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Blog {
  id          Int      @id @default(autoincrement())
  title       String?
  description String?
  image       String?
  createdAt   DateTime @default(now())
}

enum OrderStatus {
  PENDING
  INPROGRESS
  DELIVERED
  REFUNDED
  CANCELED
}
